{"m":"//settings\nPOX.setting={\n\tname:\"sample_webcam\",\n\tscale:1.0\n};\n\nnavigator.mediaDevices.enumerateDevices().then(function(s) {\n \tfor(var i=0;i<s.length;i++) {\n \t\tif(s[i].kind ==\"videoinput\") {\n \t\t\tPOX.log(s[i].label+\"/\"+s[i].deviceId)\n \t\t}\n \t}\n })\n//scenedatass\nvar stream ;\nnavigator.mediaDevices.getUserMedia({video: {facingMode:\"environment\" }, audio: false}).then(function(st) {\n\tPOX.log(\"ok\") ;\n\tstream = st ;\n\tvar video = document.createElement('video');\n\tvideo.setAttribute(\"autoplay\", true)\n\tvideo.setAttribute(\"playsinline\",true)\n\tvideo.style.width = \"0.1px\" ;\n\tdocument.body.appendChild(video) ;\n    video.addEventListener('canplaythrough', function(){\n\tvar vw = video.videoWidth ;\n\tvar vh = video.videoHeight ;\n\tvar sp = new WWModel();\n\tsp.primitive(\"plane\",{div:20});\n\n\tvar scene={\n\t\tenv:{clear_color:[0.0,0.0,0.0,1.0],cull:false},\n\t\tvs_uni:{\n\t\t    col:[0.5,0.5,1.0,1.0]\n\t\t},\n\t\tfs_uni:{\n\t\t\tlvec:[0.6,1.0,0.8],\n\t\t\ttex1:0,\n\t\t\tmode:0\n\t\t},\n\t\ttexture:[\n\t\t\t{video:video}\n\t\t],\n\t\tmodel:[\n\t\t\t{geo:sp.objModel(),\n\t\t\tbm:new CanvasMatrix4().scale(vw/vh,1,1).rotate(90,1,0,0)\n\t\t\t},\n\t\n\t\t{name:\"axis\",\n\t\t\tgeo:{mode:\"lines\",\n\t\t\t\tvtx_at:[\"position\"],\n\t\t\t\tvtx:[0,0,0,200,0,0,0,0,0,0,200,0,0,0,0,0,0,200]},\n\t\t\tfs_uni:{bcolor:[1.0,1.0,1.0,1.0],mode:1}},\n\t\t]\n\t}\n\tPOX.setScene(scene) ;\n    })\n\ttry {\n\t\tvideo.src = window.URL.createObjectURL(st);\n\t} catch(err) {\n\t\tvideo.srcObject = st ;\n\t}\n})\n//sceneupdate\nPOX.update=function(render,cam,time){\n\tvar ret={};\n\tvar m=render.getModelData(0);\n\trender.data.model[0].mm = new CanvasMatrix4().rotate(time/30,0,1,0);\n\treturn ret;\n}\t\n","vs":"attribute vec3 position;\nattribute vec3 norm;\nattribute vec2 uv ;\n\nuniform mat4 mvpMatrix;\nuniform mat4 invMatrix;\nuniform vec4 col ;\n\nvarying vec3 tnorm ;\nvarying vec4 color ;\nvarying vec2 texCoord;\n\nvoid main() {\n\tvec2 uv2 = uv ;\n\tcolor = col ;\n\ttexCoord\t= vec2(uv.x,1.0-uv.y);\n\ttnorm = (invMatrix * vec4(norm,0.0)).xyz ;\n\tgl_Position = mvpMatrix * vec4(position, 1.0) ;\n}\n","fs":"precision highp float;\nuniform int mode ;\nuniform vec4 bcolor ;\nuniform vec3 eyevec ;\nuniform vec3 lvec ;\t\nuniform sampler2D tex1;\n\t\nvarying vec3 tnorm ;\nvarying vec4 color ;\nvarying vec2 texCoord;\n\nvoid main() {\n\tvec3 col = texture2D(tex1, texCoord).xyz ;\n\tvec3 norm = normalize(tnorm) ;\n\tfloat diff= clamp((dot(norm,normalize(lvec))+0.5)/1.5,0.0,1.0);\n\tfloat spec= pow(clamp(dot(norm,normalize(normalize(lvec)+normalize(eyevec))),0.0,1.0),20.0);\n\tvec3 fcolor = col * (diff * 0.8 + 0.2) + vec3(1.0,1.0,1.0)*(spec * 0.6);\n\tgl_FragColor = (mode!=1) ? vec4(fcolor,color.w):vec4(bcolor.x,bcolor.y,bcolor.z,1.0);\n}\n","version":"0.1"}